{
  "_from": "node-minify",
  "_id": "node-minify@2.4.1",
  "_inBundle": false,
  "_integrity": "sha512-JGUBi1cuJNyERiFs8jYigvBQ42GTwrwaWYIPWzq3/rXDYqLzm4XC3R3x82iXaS4MI+DMLgxFGtUw5oaPrIjNRw==",
  "_location": "/node-minify",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-minify",
    "fetchSpec": "latest",
    "name": "node-minify",
    "raw": "node-minify",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-minify/-/node-minify-2.4.1.tgz",
  "_shasum": "d55a5f0bc30de88818d9f1303b13d2fa9a9bc126",
  "_spec": "node-minify",
  "_where": "/home/viniceosm/Documentos/NODEJS/demerge",
  "author": {
    "email": "rodolphe@2clics.net",
    "name": "Rodolphe Stoclin",
    "url": "http://2clics.net"
  },
  "bugs": {
    "url": "https://github.com/srod/node-minify/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-core": "6.26.0",
    "babel-preset-minify": "0.2.0",
    "butternut": "0.4.6",
    "clean-css": "4.1.9",
    "csso": "3.4.0",
    "depd": "1.1.1",
    "glob": "7.1.2",
    "google-closure-compiler-js": "20170910.0.1",
    "mkdirp": "0.5.1",
    "node-version": "1.1.0",
    "sqwish": "0.2.2",
    "uglify-js": "3.1.9",
    "xtend": "4.0.1"
  },
  "deprecated": false,
  "description": "Javascript / CSS minifier based on Babel-minify / Butternut / YUI Compressor / Google Closure Compiler / UglifyJS2 / Sqwish / Clean-css / CSSO",
  "devDependencies": {
    "babel-preset-env": "1.6.1",
    "codecov": "3.0.0",
    "eslint": "4.11.0",
    "eslint-config-prettier": "2.7.0",
    "eslint-plugin-prettier": "2.3.1",
    "husky": "0.14.3",
    "jest": "21.2.1",
    "lint-staged": "5.0.0",
    "prettier": "1.8.2"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/srod/node-minify",
  "jest": {
    "collectCoverage": true,
    "coverageDirectory": "./coverage/",
    "notify": true,
    "testEnvironment": "node",
    "verbose": true
  },
  "keywords": [
    "babel-minify",
    "butternut",
    "clean-css",
    "closure",
    "compiler",
    "compressor",
    "csso",
    "gcc",
    "google",
    "minifier",
    "minify",
    "sqwish",
    "uglifyjs",
    "uglifyjs2",
    "windows",
    "yui"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "git add",
      "npm run prettier-write --"
    ]
  },
  "main": "lib/node-minify.js",
  "name": "node-minify",
  "optionalDependencies": {},
  "readme": "[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Circle CI Build][circleci-image]][circleci-url]\n[![Codecov][codecov-image]][codecov-url]\n\n[![Dependency Status][dependency-image]][dependency-url]\n[![devDependency Status][devdependency-image]][devdependency-url]\n[![Greenkeeper badge](https://badges.greenkeeper.io/srod/node-minify.svg)](https://greenkeeper.io/)\n\n# Node-minify\n\nA very light minifier Node.js module.\n\nSupport:\n\n- Babel-minify\n- Butternut\n- YUI Compressor\n- Google Closure Compiler\n- UglifyJS\n- Clean-css\n- CSSO\n- Sqwish\n\nIt allow you to compress JavaScript and CSS files.\n\nCSS benchmark : http://goalsmashers.github.io/css-minification-benchmark/\n\nI recommend to execute it at boot time for production use.\n\n## Installation\n\n```bash\nnpm install node-minify\n```\n\n## Quick Start\n\n```js\nvar compressor = require('node-minify');\n\n// Using Google Closure Compiler\ncompressor.minify({\n  compressor: 'gcc',\n  input: 'foo.js',\n  output: 'bar.js',\n  callback: function (err, min) {}\n});\n\n// Using UglifyJS\ncompressor.minify({\n  compressor: 'uglifyjs',\n  input: './**/*.js',\n  output: 'bar.js',\n  callback: function (err, min) {}\n});\n\n// Using Promise\nvar promise = compressor.minify({\n  compressor: 'uglifyjs',\n  input: './**/*.js',\n  output: 'bar.js'\n});\n\npromise.then(function(min) {});\n```\n\n[More examples](https://github.com/srod/node-minify/blob/master/examples/server.js)\n\n## Concatenate Files\n\nIn order to concatenate files, simply pass in an array with the type `no-compress`.\n\n```js\ncompressor.minify({\n  compressor: 'no-compress',\n  input: ['foo.js', 'foo2.js', 'foo3.js'],\n  output: 'bar.js',\n  callback: function (err, min) {}\n});\n```\n\n## Using wildcards\n\n```js\ncompressor.minify({\n  compressor: 'gcc',\n  input: 'public/**/*.js',\n  output: 'bar.js',\n  callback: function (err, min) {}\n});\n```\n\n## Using sync option\n\n```js\ncompressor.minify({\n  compressor: 'yui-js',\n  input: 'foo.js',\n  output: 'bar.js',\n  sync: true,\n  callback: function (err, min) {}\n});\n```\n\n## Using public folder\n\n`publicFolder` allow you to specify an input and output folder.\n\nIt avoids you to specify the folder for each file.\n\n```js\ncompressor.minify({\n  compressor: 'gcc',\n  publicFolder: './public/',\n  input: ['foo.js', 'foo2.js'],\n  output: 'bar.js',\n  callback: function (err, min) {}\n});\n```\n\n## Max Buffer Size\n\nIn some cases you might need a bigger max buffer size (for example when minifying really large files).\nBy default the buffer is `1000 * 1024` which should be enough. If you however need more buffer, you can simply pass in the desired buffer size as an argument to `compressor.minify` like so:\n\n```js\ncompressor.minify({\n  compressor: 'gcc',\n  input: 'foo.js',\n  output: 'bar.js',\n  sync: true,\n  buffer: 1000 * 1024,\n  callback: function (err, min) {}\n});\n```\n\n## Passing options\n\nYou can pass an object to the compressor.\n\nPlease check available options.\n\n### Options for Babel-minify\n\n```js\ncompressor.minify({\n  compressor: 'babel-minify',\n  input: 'foo.js',\n  output: 'bar.js',\n  options: {\n    babelrc: 'public/.babelrc',\n    presets: ['env']\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/babel/minify)\n\n### Options for Butternut\n\n```js\ncompressor.minify({\n  compressor: 'butternut',\n  input: 'foo.js',\n  output: 'bar.js',\n  options: {\n    check: false,\n    allowDangerousEval: false,\n    sourceMap: true\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/Rich-Harris/butternut)\n\n### Options for YUI Compressor\n\n```js\ncompressor.minify({\n  compressor: 'yui-js',\n  input: 'foo.js',\n  output: 'bar.js',\n  options: {\n    'line-break': 80,\n    charset: 'utf8'\n    ... // See more information link below\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](http://yui.github.io/yuicompressor)\n\n### Options for Google Closure Compiler\n\n```js\ncompressor.minify({\n  compressor: 'gcc',\n  input: 'foo.js',\n  output: 'bar.js',\n  options: {\n    createSourceMap: true,\n    compilation_level: 'WHITESPACE_ONLY',\n    language: 'ECMASCRIPT6'\n    ... // See more information link below\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://developers.google.com/closure/compiler/docs/api-ref)\n\n### Options for UglifyJS\n\n```js\ncompressor.minify({\n  compressor: 'uglifyjs',\n  input: 'foo.js',\n  output: 'bar.js',\n  options: {\n    warnings: true, // pass true to display compressor warnings.\n    mangle: false // pass false to skip mangling names.\n    output: {} // pass an object if you wish to specify additional output options. The defaults are optimized for best compression.\n    compress: false // pass false to skip compressing entirely. Pass an object to specify custom compressor options.\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/mishoo/UglifyJS2)\n\n### Options for clean-css\n\n```js\ncompressor.minify({\n  compressor: 'clean-css',\n  input: 'foo.css',\n  output: 'bar.css',\n  options: {\n    advanced: false, // set to false to disable advanced optimizations - selector & property merging, reduction, etc.\n    aggressiveMerging: false // set to false to disable aggressive merging of properties.\n    ... // See more information link below\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/jakubpawlowicz/clean-css/tree/3.4)\n\n### Options for CSSO\n\n```js\ncompressor.minify({\n  compressor: 'csso',\n  input: 'foo.css',\n  output: 'bar.css',\n  options: {\n    restructureOff: true // turns structure minimization off\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/css/csso/blob/master/docs/usage/usage.en.md)\n\n### Options for Sqwish\n\n```js\ncompressor.minify({\n  compressor: 'sqwish',\n  input: 'foo.css',\n  output: 'bar.css',\n  options: {\n    strict: true // strict optimizations\n  },\n  callback: function (err, min) {}\n});\n```\n\n[More informations](https://github.com/ded/sqwish)\n\n## Babel-minify\n\n  Babel-minify can compress only JavaScript files.\n\n  [https://github.com/babel/minify](https://github.com/babel/minify)\n\n## Butternut\n\n  Butternut can compress only JavaScript files.\n\n  [https://github.com/Rich-Harris/butternut](https://github.com/Rich-Harris/butternut)\n\n## YUI Compressor\n\n  Yahoo Compressor can compress both JavaScript and CSS files.\n\n  [http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/)\n\n## Google Closure Compiler\n\n  Google Closure Compiler can compress only JavaScript files.\n\n  It will throw an error if you try with CSS files.\n\n  GCC latest version requires Java 1.8\n  You can use the legacy version that use Java 1.6\n\n  ```js\n  var compressor = require('node-minify');\n\n  // Using Google Closure Compiler legacy version for Java 1.6\n  compressor.minify({\n    compressor: 'gcc-legacy',\n    input: 'foo.js',\n    output: 'bar.js',\n    callback: function (err, min) {}\n  });\n  ```\n\n  [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)\n\n## UglifyJS\n\n  UglifyJS can compress only JavaScript files.\n\n  It will throw an error if you try with CSS files.\n\n  [https://github.com/mishoo/UglifyJS2](https://github.com/mishoo/UglifyJS2)\n\n## Clean-css\n\n  Clean-css can compress only CSS files.\n\n  [https://github.com/GoalSmashers/clean-css](https://github.com/GoalSmashers/clean-css)\n\n## CSSO\n\n  CSSO can compress only CSS files.\n\n  [https://github.com/css/csso](https://github.com/css/csso)\n\n## Sqwish\n\n  Sqwish can compress only CSS files.\n\n  [https://github.com/ded/sqwish](https://github.com/ded/sqwish)\n\n## Warning\n\n  It assumes that you have Java installed on your environment for both GCC and YUI Compressor. To check, run:\n\n```bash\njava -version\n```\n  How to install:\n\n  Mac: [https://java.com/en/download/help/mac_install.xml](https://java.com/en/download/help/mac_install.xml)\n\n  Windows: [https://java.com/en/download/help/windows_manual_download.xml](https://java.com/en/download/help/windows_manual_download.xml)\n\n  Linux: [https://www.java.com/en/download/help/linux_x64_install.xml](https://www.java.com/en/download/help/linux_x64_install.xml)\n\n## Windows support\n\n  Since v0.5.0, a windows support is available for the no-compress option and uglify-js (thanks to pieces029 and benpusherhq)\n\n## License\n\n  [MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/node-minify.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/node-minify.svg\n[npm-url]: https://npmjs.org/package/node-minify\n[travis-image]: https://img.shields.io/travis/srod/node-minify/master.svg?label=linux\n[travis-url]: https://travis-ci.org/srod/node-minify\n[appveyor-image]: https://img.shields.io/appveyor/ci/srod/node-minify/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/srod/node-minify\n[coveralls-image]: https://img.shields.io/coveralls/srod/node-minify/master.svg\n[coveralls-url]: https://coveralls.io/r/srod/node-minify?branch=master\n[dependency-image]: https://img.shields.io/david/srod/node-minify.svg?style=flat\n[dependency-url]: https://david-dm.org/srod/node-minify\n[devdependency-image]: https://img.shields.io/david/dev/srod/node-minify.svg?style=flat\n[devdependency-url]: https://david-dm.org/srod/node-minify#info=devDependencies\n[circleci-image]: https://circleci.com/gh/srod/node-minify/tree/master.svg?style=shield\n[circleci-url]: https://circleci.com/gh/srod/node-minify/tree/master\n[codecov-image]: https://codecov.io/gh/srod/node-minify/branch/develop/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/srod/node-minify\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/srod/node-minify.git"
  },
  "scripts": {
    "clean": "rm -f ./examples/public/dist/*",
    "eslint": "eslint lib test || true",
    "posttest": "npm run clean",
    "precommit": "lint-staged",
    "pretest": "npm run eslint",
    "prettier": "prettier",
    "prettier-project": "npm run prettier-write -- '{lib,__tests__}/**/*.js'",
    "prettier-write": "npm run prettier -- --single-quote --print-width 120 --write",
    "publish-beta": "npm publish --tag beta",
    "publish-latest": "npm publish",
    "release-major": "npm version major -m 'Bump %s' && git push --tags origin HEAD:master",
    "release-minor": "npm version minor -m 'Bump %s' && git push --tags origin HEAD:master",
    "release-patch": "npm version patch -m 'Bump %s' && git push --tags origin HEAD:master",
    "test": "jest"
  },
  "version": "2.4.1"
}
